def getBuildInfo() {
  def props = readProperties(file: 'build-info.properties')
//  props['new_rev'] = props['rev'].toInteger() + 1
//  props['swt_version'] = props['maj_ver'] + props['min_ver'] + 'r' + props['rev']
//  props['new_version'] = props['maj_ver'] + props['min_ver'] + 'r' + props['new_rev']
  return props
}

pipeline {
  agent any

   options {
    timeout(time: 120, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
    // skipDefaultCheckout true
    checkoutToSubdirectory('git')
  }

  triggers {
     cron('0 1 * * 5')
  }

  tools {
    maven 'apache-maven-latest'
    jdk 'temurin-jdk17-latest'
  }

  environment {
    CHECKOUT = 'false'
    PUBLISH_LOCATION = 'simrel/orbit-legacy'
    BUILD_TIMESTAMP = sh(returnStdout: true, script: 'date +%Y%m%d-%H%M').trim()
  }


  parameters {
    choice(
      name: 'BUILD_TYPE',
      choices: ['<default>', 'N', 'I', 'S', 'R'],
      description: '''
        Choose the type of build.
        '''
    )

    booleanParam(
      name: 'skipTests',
      defaultValue: false,
      description: 'Whether to skip the tests.'
    )
  }

  stages {
    stage('Build-Info') {
      steps {
        withAnt(installation: 'apache-ant-latest') {
          sh 'ant -f git/releng/org.eclipse.emf.cdo.releng/hudson/build-info.ant'
        }
        
        /*
        */
        script {
//          def props = getProps('build-info.properties')
          def props = getBuildInfo()
          env.BUILD_VERSION = props['build.version']
          env.BUILD_TYPE = props['build.type']
          env.BUILD_QUALIFIER_DATE = props['build.qualifier.date']
          env.BUILD_QUALIFIER = props['build.qualifier']
          env.BUILD_SIGN = props['build.sign']
          env.BUILD_TRIGGER = props['build.trigger']
          env.skipTests = params.skipTests

          currentBuild.description = env.BUILD_QUALIFIER
        }
      }
    }

    stage('Description') {
      steps {
        script {
          def description = "${params.BUILD_TYPE}${env.BUILD_TIMESTAMP}"
          echo description
          currentBuild.description = description.replace("<", "&lt;").replace("\n", "<br/>")
        }
      }
    }

    stage('Checkout') {
      when {
        environment name: 'CHECKOUT', value: 'true'
      }
      steps {
        script {
          def gitVariables = checkout(
            poll: false,
            scm: [
              $class: 'GitSCM',
              branches: [[name: '*' + '/master']],
              doGenerateSubmoduleConfigurations: false,
              submoduleCfg: [],
              extensions: [
                [$class: 'CloneOption', shallow: false],
                [$class: 'RelativeTargetDirectory', relativeTargetDir: 'git']
              ],
              userRemoteConfigs: [[url: 'https://github.com/eclipse-cdo/cdo.git' ]]
            ]
          )

          echo "$gitVariables"
          env.GIT_COMMIT = gitVariables.GIT_COMMIT
        }
      }
    }

    stage('Rewrite-Target-Definition') {
      steps {
        withAnt(installation: 'apache-ant-latest') {
          sh 'ant -f git/releng/org.eclipse.emf.cdo.releng/hudson/rewrite-target-definition.ant'
        }
      }
    }

    stage('Build') {
      steps {
        sshagent(['projects-storage.eclipse.org-bot-ssh']) {
          sh '''
            mvn \
              -f git/pom.xml \
              --no-transfer-progress \
              -DBUILD_INFO_PROPERTIES=$WORKSPACE/build-info.properties \
              -DCDO_TESTS=IntegrationTests \
              -DSIGNING_MARKER=$WORKSPACE/signing.marker \
              -DskipTests=$skipTests \
              clean \
              verify
            '''
        }
      }
    }
    
    stage('Generate') {
      when {
        branch 'master'
      }
      steps {
        withAnt(installation: 'apache-ant-latest') {
          sh "ant -f git/releng/org.eclipse.emf.cdo.releng/hudson/generate.ant -Dskip.tests=$skipTests"
        }
      }
    }
  }

  post {
    always {
      archiveArtifacts '**'
    }

    failure {
      mail to: 'stepper@esc-net.de',
      subject: "[CDO CI] Build Failure ${currentBuild.fullDisplayName}",
      mimeType: 'text/html',
      body: "Project: ${env.JOB_NAME}<br/>Build Number: ${env.BUILD_NUMBER}<br/>Build URL: ${env.BUILD_URL}<br/>Console: ${env.BUILD_URL}/console"
    }

    fixed {
      mail to: 'stepper@esc-net.de',
      subject: "[CDO CI] Back to normal ${currentBuild.fullDisplayName}",
      mimeType: 'text/html',
      body: "Project: ${env.JOB_NAME}<br/>Build Number: ${env.BUILD_NUMBER}<br/>Build URL: ${env.BUILD_URL}<br/>Console: ${env.BUILD_URL}/console"
    }

    cleanup {
      deleteDir()
    }
  }
}

def getProps(path) {
  Map<String, String> props = new HashMap<>()
  java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("([^= ]+) *= *(.*)")
  BufferedReader stream = new BufferedReader(new FileReader(path))
  
  try {
    String line
    while ((line = stream.readLine()) != null) {
      java.util.regex.Matcher matcher = pattern.match(line)
      if (matcher.find()) {
        props.put(matcher.geroup(1), matcher.group(2))       
      }
    }

    return props
  } finally {
    stream.close()
  }
}

def getPropsOrig(path) {
  Properties props = new Properties()
  InputStream stream = new FileInputStream(file(path))
  
  try {
    props.load(stream)
    return props
  } finally {
    stream.close()
  }
}
